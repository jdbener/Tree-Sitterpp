#ifndef __TREE_SITTERPP_LANGUAGE_HPP__
#define __TREE_SITTERPP_LANGUAGE_HPP__

#include "helpers.hpp"
#include "tree_sitter/parser.h"

namespace TreeSitter {

	struct Language : TSLanguage {
		Language() = default;
		Language(TSLanguage* lang) : TSLanguage(*lang) { }
		Language(const Language&) = default;
		Language(Language&&) = default;
		Language& operator=(TSLanguage* lang) { *this = Language(lang); return *this; }
		Language& operator=(const Language&) = default;
		Language& operator=(Language&&) = default;

		inline operator TSLanguage*() { return this; }
		inline operator const TSLanguage*() const { return this; }

		/**
		 * Get the number of distinct node types in the language.
		 */
		inline uint32_t symbol_count() const { return ts_language_symbol_count(*this); }

		/**
		 * Get a node type string for the given numerical id.
		 */
		inline const std::string_view symbol_name(TSSymbol symbol) const { return ts_language_symbol_name(*this, symbol); }

		/**
		 * Get the numerical id for the given node type string.
		 */
		inline TSSymbol symbol_for_name(const std::string_view name, bool is_named = true) { return ts_language_symbol_for_name(*this, name.data(), name.size(), is_named); }

		/**
		 * Get the number of distinct field names in the language.
		 */
		inline uint32_t field_count() { return ts_language_field_count(*this); }

		/**
		 * Get the field name string for the given numerical id.
		 */
		inline const std::string_view field_name_for_id(TSFieldId id) { return ts_language_field_name_for_id(*this, id); }

		/**
		 * Get the numerical id for the given field name string.
		 */
		inline TSFieldId field_id_for_name(const std::string_view name) { return ts_language_field_id_for_name(*this, name.data(), name.size()); }

		/**
		 * Check whether the given node type id belongs to named nodes, anonymous nodes,
		 * or a hidden nodes.
		 *
		 * See also `ts_node_is_named`. Hidden nodes are never returned from the API.
		 */
		inline TSSymbolType symbol_type(TSSymbol symbol) { return ts_language_symbol_type(*this, symbol); }

		/**
		 * Get the ABI version number for this language. This version number is used
		 * to ensure that languages were generated by a compatible version of
		 * Tree-sitter.
		 *
		 * See also `ts_parser_set_language`.
		 */
		inline uint32_t version() { return ts_language_version(*this); }
	};

}

#endif // __TREE_SITTERPP_LANGUAGE_HPP__